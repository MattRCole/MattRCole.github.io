{"version":3,"sources":["game/index.ts","util/url.ts","game/board.ts","game/words.ts","game/dictionary.ts","game/context.ts","components/Results.tsx","components/ScoredWordList.tsx","util/css-parse.ts","style/constants.ts","components/Score.tsx","util/hooks.ts","util/touch.ts","components/Board.tsx","components/Guesses.tsx","components/MostRecentGuess.tsx","components/game/layouts.tsx","components/Game.tsx","components/StartScreen.tsx","App.tsx","index.tsx"],"names":["ScoreType","parseURLSearch","search","replace","split","reduce","acc","keyValuePair","key","value","decodeURI","getBoard","line","board","width","Math","sqrt","length","floor","Error","R","splitLineAlongRows","getColumns","letter","index","visited","column","getRows","row","deepCopyBoard","copy","getAllPossibleCoordinates","rows","columns","getPossibleTravelDirections","unfilteredRows","potentialRow","unfilteredColumns","potentialColumn","coordinates","currentRow","currentColumn","orderWordAlphabetically","dedupe","orderedLine","a","b","charCodeAt","removeDuplicates","getLetterCounts","word","ordered","currentChar","recursiveTraverseBoard","wordSoFar","foundWords","dictionary","boardCopy","maybeWord","narrowedDictionary","push","possibleDirections","untraveledDirections","coords","loadDictionary","fullDictionary","minimumWordLength","getFreshBoard","allSquares","remainingDictionary","includes","removeWordsThatCantBeSpelledOnBoard","lineLetterCount","wordLetterCount","letters","Object","keys","removeWordsThatRequireMoreLetters","wordLength","removeImpossibleWords","getInitialState","forceUpdate","totalTime","currentLetter","currentLetterChain","mouseIsClicked","possibleWordsGivenLetterChain","remainingWords","guessedWords","startTime","Date","shouldUpdate","actionTypes","hover","click","handleLetterChainUpdate","state","newPossibleWords","options","substring","possibleWordsGivenBoard","handleClick","clicked","handleStartClick","newBoard","x","y","gameIsOver","foundAWord","newFoundWords","newRemainingWords","handleFinishClick","handleClickedHover","newCoords","filter","cw","isValidMove","newLetter","changeCurrentLetter","gameOver","console","log","gameReducer","action","toReturn","type","info","handleHover","GameContext","createContext","GameParamMap","getLetterScore","language","scores","scoreWord","Letters","orderByWordScore","scoreType","Lists","parseGameParameters","urlParams","Board","Language","time","parseInt","Time","score","Score","MinimumWordLength","minimumVersion","MinimumVersion","version","Version","useGameParameters","location","useLocation","useMemo","useDictionary","gameParams","completeDictionary","url","useState","loading","error","updateDictionary","useEffect","indexOf","axios","get","then","dict","data","catch","err","useLanguageDictionary","boardDictionary","updateBoardDictionary","Promise","resolve","resolveDictionary","ScoredWords","scoredWords","orderedWords","className","toUpperCase","getHeight","id","rawHeight","getComputedStyle","document","getElementById","height","parseFloat","JSON","stringify","unitMap","em","vh","vw","px","num","cssFunctionMap","clamp","min","target","max","clampMin","getCssFunctionName","expression","firstParenIndex","fnName","trim","isValidFunctionName","stitchParensReducer","arr","left","right","forEach","char","getParenCounts","isCssFunction","arg","getUnit","unit","exec","hasOwnProperty","isValidUint","evaluateArgument","evaluateFunction","number","parsedNumber","args","map","w","values","message","cssExp","getConstants","fontSize","fontSizeTitle","fontWeightBold","fontWeightLight","colorContentDark","colorContentLight","colorContentLowContrastDark","colorContentLowContrastLight","colorBackgroundDark","colorBackgroundLight","colorBackgroundDarkAlt","colorBackgroundLightAlt","colorAccent","useConstants","constants","updateConstants","updateState","useCallback","eventListener","window","addEventListener","removeEventListener","getTime","timeInSeconds","seconds","minutes","getFormatted","toString","padStart","remainingTime","hideTime","showPercent","currentScore","totalScore","foundCount","totalCount","style","display","ElementIdentifier","ListSelector","listName","displayedList","updateDisplayedList","title","FoundWords","svgProps","fill","svg","join","onClick","Results","orderedFoundWords","orderedMissedWords","foundWordsClass","missedWordsClass","MissedWords","listSelectorProps","useElementSize","identifierType","identifier","elementName","elementNameType","element","setElement","top","bottom","size","setSize","resizeCallback","el","getBoundingClientRect","Class","getElementsByClassName","Id","Type","getElementsByTagName","getElementBasedOnIdentifier","getPointOnGridInfo","gridOrigin","squareDimensions","point","useBoundingBox","boundingBox","originX","originY","getUnadjustedIndex","dimension","offset","isNegative","getOffset","origin","xOffset","yOffset","xIndex","yIndex","getBoundedIndex","residingSquare","getCenterOfIndex","round","centerOfSquare","averageDimension","pointDistanceFromCenterOfSquare","v1","v2","abs","getMagnitued","Letter","dispatch","useContext","classes","showScore","undefined","onMouseOver","Row","children","getLast","items","boardWidth","makeColumn","maybeDispatchMove","acceptableDistance","clientX","clientY","divisionAmount","onMouseDown","onMouseUp","onTouchStart","e","lastTouch","touches","onTouchMove","onTouchEnd","Wrapped","context","Provider","Guess","guess","isFirstGuess","isInDictionary","Guesses","guesses","guessesReversed","indexedMap","guessInfo","lastIndexOf","getGuessInfo","MostRecentGuess","showLetterChain","mostRecentGuess","isCorrectGuess","repeatScore","HorizontalContainer","VerticalContainer","Game","start","handleFinish","startedAt","useReducer","useGame","game","gameParameters","callback","interval","initialValue","setValue","setInterval","intervalValue","clearInterval","useInterval","timePassedInMs","timePassed","stopInterval","useVerticalLayout","guessProps","mostRecentGuesses","foundWordsComponent","layout","getReadableTime","StartScreen","handleStart","scoringType","languageCode","gridSize","startButtonClass","disabled","wordCount","en_US","App","started","updateStarted","finished","results","updateResults","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.91a62586.chunk.js","sourcesContent":["import axios from 'axios'\nimport * as R from 'ramda'\nimport { Dispatch, Reducer, useEffect, useMemo, useReducer, useState } from 'react'\nimport { useLocation } from 'react-router'\nimport { parseURLSearch } from '../util/url'\nimport { Board } from './board'\nimport {\n  GameAction,\n  gameReducer,\n  GameReducerInitializerArgument,\n  GameState as InternalGameState,\n  getInitialState\n} from './context'\nimport { loadDictionary } from './dictionary'\n\nimport scores from './scores.json'\n\nconst alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'qu', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'] as const\ntype Alphabet = typeof alphabet[number]\n\nexport enum ScoreType {\n  Letters = 'l',\n  Words = 'w'\n}\n\nexport type Language = keyof typeof scores\nexport type Letter = keyof typeof scores[Language]\n\nexport const getLetterScore = (letter: string, language: string) => scores[language as Language][letter as Letter]\n\nexport const scoreWord = (word: string, _scoreType: ScoreType = ScoreType.Letters, language: string = 'en_US') => R.pipe<string, Alphabet[], number>(\n  R.splitEvery(1) as (a: string) => Alphabet[],\n  R.reduce<Alphabet, number>((acc, letter) => acc + scores[language as any as keyof typeof scores][(letter as string) === 'q' ? 'qu' : letter], 0)\n)(word)\n\nexport const orderByWordScore = (dictionary: string[], scoreType: ScoreType = ScoreType.Letters) => R.sortWith(\n  [R.descend<string>((word) => scoreWord(word, scoreType)), R.ascend<string>(R.identity)],\n  dictionary\n)\n\nexport type GameURLParams = {\n  b: string,\n  l: string,\n  t: string,\n  s: ScoreType,\n  m: string,\n  mv: string,\n  v: string\n}\n\nenum GameParamMap {\n  Board = 'b',\n  Language = 'l',\n  Time = 't',\n  Score = 's',\n  MinimumWordLength = 'm',\n  MinimumVersion = 'mv',\n  Version = 'v'\n}\n\nexport const parseGameParameters = (urlParams: GameURLParams) => ({\n  board: urlParams[GameParamMap.Board],\n  language: urlParams[GameParamMap.Language],\n  time: parseInt(urlParams[GameParamMap.Time]),\n  score: urlParams[GameParamMap.Score],\n  minimumWordLength: parseInt(urlParams[GameParamMap.MinimumWordLength]),\n  minimumVersion: parseInt(urlParams[GameParamMap.MinimumVersion]),\n  version: parseInt(urlParams[GameParamMap.Version])\n})\n\nexport type GameParameters = ReturnType<typeof parseGameParameters>\n\nexport type GameState = {\n  currentLetterChain: string,\n  board: Board,\n  foundWords: string[],\n  remainingWords: string[],\n  guessedWords: string[]\n}\n\nexport const useGameParameters = () => {\n  const location = useLocation()\n  const params = useMemo(() => parseGameParameters(parseURLSearch<GameURLParams>(location.search)), [location.search])\n  return params\n}\n\nexport const useGame = (urlParams: GameURLParams, dictionary: string[]): [GameState, Dispatch<GameAction>, GameParameters] => {\n  const gameParams = parseGameParameters(urlParams)\n\n  const forceUpdate = useReducer((x: number) => x+1, 0)[1]\n  const [state, dispatch] = useReducer<\n    Reducer<InternalGameState, GameAction>,\n    GameReducerInitializerArgument\n  >(gameReducer, {\n    totalTime: gameParams.time,\n    forceUpdate,\n    dictionary,\n    ...gameParams\n  }, getInitialState)\n\n  const { board, foundWords, remainingWords, guessedWords, currentLetterChain } = state\n\n  const exportedState = { board, foundWords, remainingWords, guessedWords, currentLetterChain }\n  return [exportedState, dispatch, gameParams]\n}\n\ntype UseLanguageDictionaryReturnValue = {\n  dictionary: string[],\n  loading: boolean,\n  error: boolean\n}\n\nconst useLanguageDictionary = (language: string) => {\n  const url = useMemo(\n    () => `https://raw.githubusercontent.com/lexica/lexica/master/assets/dictionaries/dictionary.${language}.txt`,\n    [language]\n  )\n  const [dictionary, updateDictionary] = useState<UseLanguageDictionaryReturnValue>({\n    dictionary: [],\n    loading: true,\n    error: false\n  })\n\n  useEffect(() => {\n    if (url.indexOf('..') === -1) {\n      axios.get<string>(url).then(({ data }) => {\n        const dict = data.split('\\n')\n        updateDictionary({\n          loading: false,\n          error: false,\n          dictionary: dict\n        })\n      }).catch(err => {\n        updateDictionary({\n          loading: false,\n          error: true,\n          dictionary: []\n        })\n        return err\n      })\n    }\n  }, [url, updateDictionary])\n\n  return dictionary\n}\n\nconst resolveDictionary = (dictionary: string[], board: string, minimumWordLength: number): Promise<string[]> => {\n  const canUseWebWorkers = false\n  if (canUseWebWorkers) {\n    // do the web workers stuff here.... not sure how to do that quite yet\n  }\n  return Promise.resolve(loadDictionary(board, dictionary, minimumWordLength))\n}\n\nexport const useDictionary = (): UseLanguageDictionaryReturnValue => {\n  const gameParams = useGameParameters()\n  const completeDictionary = useLanguageDictionary(gameParams.language)\n  const [boardDictionary, updateBoardDictionary] = useState(completeDictionary)\n\n  useEffect(() => {\n    const { dictionary, loading, error } = completeDictionary\n    const { board, minimumWordLength } = gameParams\n    if (!loading && !error) {\n      resolveDictionary(dictionary, board, minimumWordLength)\n        .then(boardDictionary => updateBoardDictionary({\n          dictionary: boardDictionary,\n          loading: false,\n          error: false\n        }))\n        .catch(err => {\n          updateBoardDictionary({\n            dictionary,\n            loading: false,\n            error: true\n          })\n          return err\n        })\n    }\n  }, [completeDictionary, gameParams])\n\n  return boardDictionary\n}\n","\nexport const parseURLSearch = <T = any>(search: string): T => {\n  const keyValuePairs = search.replace('?', '').split('&')\n  return keyValuePairs.reduce((acc: Partial<T>, keyValuePair: string) => {\n    const [key, value] = keyValuePair.split('=')\n    return {\n      ...acc,\n      [decodeURI(key) as keyof T]: decodeURI(value) as unknown as T[keyof T]\n    }\n  }, {} as Partial<T>) as T\n}","import * as R from 'ramda'\n\nexport type Board = {\n  [key: number]: {\n    [key: number]: {\n      letter: string,\n      visited: boolean\n      index: number\n    }\n  } & { index: number }\n} & { width: number }\n\nconst splitLineAlongRows = (line: string) => {\n  const width = Math.sqrt(line.length)\n\n  if (Math.floor(width) !== width) {\n    // console.log(width, line, \"doesn't make a square\")\n    throw new Error(`${line} doesn't make a square`)\n  }\n\n  return R.splitEvery(width, line)\n}\n\n\nexport const getBoard = (line: string): Board => {\n  const board = splitLineAlongRows(line)\n\n  type Row = Omit<Board[number], 'index'>\n\n  const getColumns = R.pipe<string, string[], Board[number][number][], Row>(\n    R.splitEvery(1) as (a: string) => string[],\n    R.addIndex<string, Board[number][number]>(R.map)((letter: string, index: number) => ({\n      letter,\n      visited: false,\n      index\n    })),\n    R.reduce<Board[number][number], Row>((acc: Row, column: Board[number][number]) => ({\n      ...acc,\n      [column.index]: column\n    }), {})\n  )\n  const getRows = R.addIndex<string, Board[number]>(R.map)((row: string, index: number) => ({\n    ...getColumns(row),\n    index\n  }))\n\n  return { ...getRows(board), width: board.length }\n}\n\nexport const deepCopyBoard = (board: Board) => {\n  const { width } = board\n  const copy = { width } as Board\n  for(let row = 0; row < width; row++) {\n    copy[row] = { index: row }\n    for(let column = 0; column < width; column++) {\n      copy[row][column] = { ...board[row][column] }\n    }\n  }\n  return copy\n}\n\nexport type Coordinates = {\n  row: number,\n  column: number\n}\n\nexport const getAllPossibleCoordinates = ({ rows, columns }: { rows: number[], columns: number[]}) => R.reduce<number, Coordinates[]>(\n  (acc: Coordinates[], row: number) => [\n    ...acc,\n    ...R.map<number, Coordinates>((column: number) => ({ row, column }), columns)\n  ],\n  [],\n  rows\n)\n\nexport const getPossibleTravelDirections = ({ row, column, width }: { row: number, column: number, width: number}) => {\n  const unfilteredRows = [row - 1, row, row + 1]\n  const rows = R.filter((potentialRow: number) => potentialRow >= 0 && potentialRow < width, unfilteredRows)\n  const unfilteredColumns = [column - 1, column, column + 1]\n  const columns = R.filter((potentialColumn: number) => potentialColumn >= 0 && potentialColumn < width, unfilteredColumns)\n\n  // console.log({ rows, columns, unfilteredRows, unfilteredColumns })\n\n  const coordinates = getAllPossibleCoordinates({ rows, columns })\n\n  return R.filter<Coordinates>(({ row: currentRow, column: currentColumn }) => !(row === currentRow && column === currentColumn), coordinates)\n}\n\n","import * as R from 'ramda'\n\nexport const orderWordAlphabetically = (line: string, dedupe: boolean = false) => {\n  const orderedLine = R.pipe<string, string[], string[], string>(\n    R.splitEvery(1) as any as (a: string) => string[],\n    R.sort((a: string, b: string) => a.charCodeAt(0) - b.charCodeAt(0)),\n    R.join('')\n  )(line)\n\n  const removeDuplicates = R.pipe<string, string[], string[], string>(\n    R.splitEvery(1) as any as (a: string) => string[],\n    R.uniq as (a: string[]) => string[],\n    R.join('')\n  )\n\n  return dedupe ? removeDuplicates(orderedLine) : orderedLine\n}\n\ntype LetterCount = {\n  [key: string]: number\n}\n\nexport const getLetterCounts = (word: string) => {\n  const ordered = orderWordAlphabetically(word)\n  let currentChar = '\\0'\n\n\n  return R.reduce((acc: LetterCount, letter: string) => {\n    if (letter !== currentChar) {\n      currentChar = letter\n      return { ...acc, [letter]: 1 }\n  }\n\n    return { ...acc, [letter]: acc[letter] + 1 }\n  }, {}, R.splitEvery(1, ordered))\n}\n","import * as R from 'ramda'\n\nimport {\n  getLetterCounts,\n  orderWordAlphabetically\n} from './words'\nimport {\n  getBoard,\n  deepCopyBoard,\n  getAllPossibleCoordinates,\n  getPossibleTravelDirections,\n  Board,\n  Coordinates\n} from './board'\n\nexport const removeImpossibleWords = (line: string, dictionary: string[], wordLength: number) => {\n  const orderedLine = orderWordAlphabetically(line, true)\n\n  return R.filter((word: string) => {\n    if (word.length < wordLength) return false\n    const missingLetters: string = R.filter((letter: string) => !orderedLine.includes(letter), word as any) as any\n    if (missingLetters.length > 0) return false\n\n    return true\n  }, dictionary)\n}\n\nexport const removeWordsThatRequireMoreLetters = (line: string, dictionary: string[]) => {\n  const lineLetterCount = getLetterCounts(line)\n\n  return R.filter((word: string) => {\n    if (word.length > line.length) return false\n\n    const wordLetterCount = getLetterCounts(word)\n    const letters: string[] = Object.keys(wordLetterCount)\n\n    const tooManyOfOneLetter = R.reduce((acc, letter) => {\n      if (acc) return acc\n      return wordLetterCount[letter] > lineLetterCount[letter]\n    }, false, letters)\n\n    if (tooManyOfOneLetter) return false\n\n    return true\n  }, dictionary)\n}\n\ntype RecursiveTraverseBoard = {\n  row: number,\n  column: number,\n  wordSoFar: string,\n  board: Board,\n  foundWords: string[]\n  dictionary: string[]\n}\n\nconst recursiveTraverseBoard = ({ row, column, wordSoFar, board, foundWords, dictionary }: RecursiveTraverseBoard): string[] => {\n  const boardCopy = deepCopyBoard(board)\n  boardCopy[row][column].visited = true\n  const { letter } = boardCopy[row][column]\n  const maybeWord = `${wordSoFar}${letter}`\n  // console.log(`working with word chain: ${maybeWord}`)\n  const index = wordSoFar.length\n  // console.log(JSON.stringify({ maybeWord, wordSoFar }))\n\n  const narrowedDictionary = R.filter((word) => {\n    if (word[index] === maybeWord[index]) {\n      if (word.length === maybeWord.length) {\n        foundWords.push(word)\n        return false\n      }\n      return true\n    }\n    return false\n  }, dictionary)\n\n  if (narrowedDictionary.length === 0) return foundWords\n\n\n  const possibleDirections: Coordinates[] = getPossibleTravelDirections({ row, column, width: boardCopy.width })\n\n  const untraveledDirections = R.filter(({ row, column }: Coordinates) => {\n    return !boardCopy[row][column].visited\n  }, possibleDirections)\n\n  if (untraveledDirections.length === 0) return foundWords \n\n  return R.reduce((acc: string[], coords: Coordinates) => recursiveTraverseBoard({\n      ...coords,\n      board: boardCopy,\n      dictionary: narrowedDictionary,\n      foundWords: acc,\n      wordSoFar: maybeWord,\n    })\n , foundWords, untraveledDirections)\n}\n\nexport const removeWordsThatCantBeSpelledOnBoard = (line: string, dictionary: string[]) => {\n  const getFreshBoard = () => deepCopyBoard(R.once(() => getBoard(line))())\n\n  const board = getFreshBoard()\n\n  const allSquares = getAllPossibleCoordinates({\n    rows: R.times(R.identity, board.width),\n    columns: R.times(R.identity, board.width)\n  })\n\n  type TraverseBoardAcc = {\n    foundWords: string[],\n    remainingDictionary: string[]\n  }\n\n  const { foundWords } = R.reduce<Coordinates, TraverseBoardAcc>((acc, { row, column }) => {\n    const foundWords = recursiveTraverseBoard({ row, column, wordSoFar: '', board: getFreshBoard(), foundWords: acc.foundWords, dictionary: acc.remainingDictionary })\n\n    const remainingDictionary = R.filter(word => !foundWords.includes(word), acc.remainingDictionary)\n\n    return { foundWords, remainingDictionary }\n  }, { foundWords: [], remainingDictionary: dictionary }, allSquares)\n\n  return R.sort(R.ascend<string>(R.identity), R.uniq(foundWords))\n}\n\nexport const possibleWordsGivenBoard = (options: Omit<RecursiveTraverseBoard, 'foundWords'>) => {\n  const { wordSoFar } = options\n  return recursiveTraverseBoard({ ...options, foundWords: [], wordSoFar: wordSoFar.substring(0, wordSoFar.length - 1) })\n}\n\nexport const loadDictionary = (line: string, fullDictionary: string[], minimumWordLength: number) => {\n  const narrowedDictionary = removeImpossibleWords(line, fullDictionary, minimumWordLength)\n  const narrowerDictionary = removeWordsThatRequireMoreLetters(line, narrowedDictionary)\n\n  const dictionary = removeWordsThatCantBeSpelledOnBoard(line, narrowerDictionary)\n\n  return dictionary\n}\n","import React, { createContext } from 'react'\nimport * as R from 'ramda'\n\nimport { Coordinates, getBoard, getPossibleTravelDirections, deepCopyBoard } from './board'\nimport { possibleWordsGivenBoard } from './dictionary'\n\nexport type GameBoard = {\n  [key: number]: {\n    [key: number]: {\n      letter: string,\n      visited: boolean,\n      index: number\n    }\n  } & { index: number }\n} & { width: number }\n\nexport type GameContextType = {\n  board: GameBoard,\n  notifyOfLetterHover: (row: number, column: number) => void,\n  notifyOfMouseClick: (isClicked: boolean) => void,\n  possibleWords: string[],\n  foundWords: string[]\n}\n\nexport type GameState = {\n  board: GameBoard,\n  foundWords: string[],\n  possibleWordsGivenLetterChain: string[],\n  remainingWords: string[],\n  currentLetter: Coordinates,\n  currentLetterChain: string,\n  mouseIsClicked: boolean,\n  startTime: Date,\n  totalTime: number,\n  guessedWords: string[]\n  shouldUpdate: boolean\n  forceUpdate: React.DispatchWithoutAction\n}\n\nexport type GameReducerInitializerArgument = {\n  board: string,\n  forceUpdate: React.DispatchWithoutAction,\n  totalTime: number\n  dictionary: string[]\n}\n\nexport const getInitialState = ({ board, forceUpdate, totalTime, dictionary }: GameReducerInitializerArgument): GameState => {\n  return {\n    board: getBoard(board),\n    currentLetter: { row: 0, column: 0 },\n    currentLetterChain: '',\n    foundWords: [],\n    mouseIsClicked: false,\n    possibleWordsGivenLetterChain: dictionary,\n    remainingWords: dictionary,\n    guessedWords: [],\n    startTime: new Date(),\n    totalTime,\n    shouldUpdate: false,\n    forceUpdate\n  }\n}\n\nconst actionTypes = ['hover', 'click'] as const\n\nconst hover = actionTypes[0]\nconst click = actionTypes[1]\n\ntype ActionTypes = typeof actionTypes[number]\n\ntype HoverInfo = {\n  coordinates: Coordinates\n}\n\ntype ClickInfo = {\n  clicked: boolean\n}\n\nexport type GameAction = {\n  type: ActionTypes\n  info: HoverInfo | ClickInfo\n}\n\nconst changeCurrentLetter = (state: GameState, newLetter: Coordinates) => {\n  state.currentLetter.row = newLetter.row\n  state.currentLetter.column = newLetter.column\n  return state\n}\n\n\nconst handleLetterChainUpdate = (state: GameState): GameState => {\n  const {\n    possibleWordsGivenLetterChain,\n    currentLetter,\n    foundWords,\n    board,\n    currentLetterChain\n  } = state\n  const { row, column } = currentLetter\n\n  // console.log(JSON.stringify({ currentLetter, currentLetterChain }))\n\n  const newPossibleWords = R.uniq(possibleWordsGivenBoard({\n    ...currentLetter,\n    dictionary: R.filter(word => !foundWords.includes(word), possibleWordsGivenLetterChain),\n    board,\n    wordSoFar: `${currentLetterChain}${board[row][column].letter}`\n  }))\n\n  // const wordsRemoved = R.filter<string>(word => !newPossibleWords.includes(word), state.possibleWordsGivenLetterChain)\n\n  // console.log(JSON.stringify({ wordsRemoved }))\n\n  // console.log(`${state.possibleWordsGivenLetterChain.length - newPossibleWords.length} impossible words removed`)\n\n  board[row][column].visited = true\n\n  state.possibleWordsGivenLetterChain = newPossibleWords\n  state.currentLetterChain += board[row][column].letter\n\n  return state\n}\n\nconst handleStartClick = (state: GameState): GameState => {\n  return handleLetterChainUpdate(state)\n}\n\nconst handleFinishClick = (state: GameState): GameState => {\n  // console.log('finishing a click')\n\n  const {\n    startTime,\n    totalTime,\n    board\n  } = state\n\n  const newBoard = deepCopyBoard(board)\n\n    for(let x = 0; x < board.width; x++) {\n      for(let y = 0; y < board.width; y++) {\n        newBoard[x][y].visited = false\n      }\n    }\n\n  if (gameIsOver(startTime, totalTime)) {\n    state.board = newBoard\n    return state\n  }\n\n  const {\n    currentLetterChain,\n    remainingWords,\n    foundWords\n  } = state\n\n  const foundAWord = remainingWords.includes(currentLetterChain)\n\n  const newFoundWords = foundAWord ? [...foundWords, currentLetterChain] : foundWords\n  const newRemainingWords = foundAWord ? R.filter(word => word !== currentLetterChain, remainingWords) : remainingWords\n\n  const newPossibleWords = newRemainingWords\n  const newLetterChain = ''\n  state.foundWords = newFoundWords\n  state.remainingWords = newRemainingWords\n  state.possibleWordsGivenLetterChain = newPossibleWords\n  state.currentLetterChain = newLetterChain\n  state.board = newBoard\n  currentLetterChain.length && state.guessedWords.push(`${currentLetterChain}`)\n  return state\n}\n\nconst handleClick = (state: GameState, { clicked }: ClickInfo) => {\n  if (clicked === state.mouseIsClicked) return state\n\n  state.mouseIsClicked = clicked\n\n  state.shouldUpdate = true\n\n  // console.log(`is clicked: ${state.mouseIsClicked}`)\n\n  return clicked ? handleStartClick(state) : handleFinishClick(state)\n}\n\nconst isValidMove = ({ board, currentLetter }: GameState, newCoords: Coordinates) => {\n    const possibleTravelDirections = getPossibleTravelDirections({ ...currentLetter, width: board.width })\n\n    if (!possibleTravelDirections.filter(cw => newCoords.column === cw.column && newCoords.row === cw.row).length) {\n      // console.log('non-accessible coords', JSON.stringify({ currentCoordinates: currentLetter, targetCoordinates: newCoords, possibleTravelDirections }))\n      return false\n    }\n\n    const { row, column } = newCoords\n    if (board[row][column].visited) {\n      // console.log('letter is visited', JSON.stringify({ targetCoordinates: newCoords }))\n      return false\n    }\n\n    return true\n}\n\nconst areSameCoordinates = (a: Coordinates, b: Coordinates) => {\n  return a.row === b.row && a.column === b.column\n}\n\nconst handleClickedHover = (state: GameState, coordinates: Coordinates): GameState => {\n  const { currentLetter } = state\n  const shouldUpdate = !areSameCoordinates(currentLetter, coordinates) && isValidMove(state, coordinates)\n  // console.log(`same coordinates on hover, not updating: ${JSON.stringify({ currentLetter, coordinates })}`)\n  if (shouldUpdate) {\n    state.shouldUpdate = true\n    changeCurrentLetter(state, coordinates)\n    // console.log(`These should match: ${JSON.stringify({ currentLetter: state.currentLetter,  coordinates })}`)\n    return handleLetterChainUpdate(state)\n  }\n  return state\n}\n\nconst handleHover = (state: GameState, { coordinates }: HoverInfo): GameState => {\n  if (state.mouseIsClicked) return handleClickedHover(state, coordinates)\n  state.currentLetter = coordinates\n  return state\n}\n\nconst gameIsOver = (startTime: Date, totalTime: number) => {\n  const passedTime: number = ((new Date() as any) - (startTime as any)) / 1000\n  const gameOver = passedTime >= totalTime\n  console.log(`game is over: ${gameOver}`)\n  return gameOver\n}\n\nexport const gameReducer = (state: GameState, action: GameAction) => {\n  state.shouldUpdate = false\n  let toReturn = state\n  if (action.type === click) toReturn = handleClick(state, action.info as ClickInfo)\n  if (action.type === hover) toReturn = handleHover(state, action.info as HoverInfo)\n\n  if (state.shouldUpdate) {\n    // console.log('forcing update...')\n    toReturn.forceUpdate()\n  }\n\n  return toReturn\n}\n\nexport const GameContext = createContext<React.Dispatch<GameAction>>(null as any)\n","import { useState } from 'react'\n\nimport { orderByWordScore, useGameParameters } from \"../game\"\nimport ScoredWordList from './ScoredWordList'\nimport { useConstants } from '../style/constants'\n\nimport './Results.css'\nimport { ReactComponent as CheckCircle } from '@material-design-icons/svg/round/check_circle.svg'\nimport { ReactComponent as HighlightOff } from '@material-design-icons/svg/round/highlight_off.svg'\nimport Score from './Score'\n\nenum Lists {\n  FoundWords = 'found',\n  MissedWords = 'missed'\n}\n\nconst ListSelector: React.FC<{ listName: Lists, displayedList: Lists, updateDisplayedList: (list: Lists) => void }> = ({\n  listName,\n  displayedList,\n  updateDisplayedList\n}) => {\n  const constants = useConstants()\n\n  const title = listName === Lists.FoundWords\n    ? 'Found words'\n    : 'Missed words'\n\n  const svgProps = {\n    fill: constants.colorContentDark,\n    width: constants.fontSize,\n    height: constants.fontSize,\n    title\n  }\n  const svg = listName === Lists.FoundWords\n    ? <CheckCircle {...svgProps} />\n    : <HighlightOff {...svgProps}/>\n\n    return <div\n      className={[\n        'results-list-selector-button',\n        displayedList === listName ? 'selected' : ''\n      ].join(' ') }\n      onClick={() =>updateDisplayedList(listName)}\n    >\n      {svg}\n      <div className={`results-select-${listName}-words`}>{title}</div>\n    </div>\n}\n\n\nconst Results: React.FC<{ foundWords: string[], remainingWords: string[] }> = ({\n  foundWords,\n  remainingWords,\n}) => {\n  const [displayedList, updateDisplayedList] = useState(Lists.FoundWords)\n  const { score: scoreType } = useGameParameters()\n  const orderedFoundWords = orderByWordScore(foundWords)\n  const orderedMissedWords = orderByWordScore(remainingWords)\n\n\n  let foundWordsClass = 'results-found-words'\n  let missedWordsClass = 'results-missed-words'\n\n  switch (displayedList) {\n    case Lists.MissedWords:\n      foundWordsClass += ' disabled'\n      break;\n    case Lists.FoundWords:\n    default:\n      missedWordsClass += ' disabled'\n  }\n\n  const listSelectorProps = { displayedList, updateDisplayedList }\n\n  return <div className=\"results\">\n    <Score\n      hideTime\n      foundWords={foundWords}\n      remainingWords={remainingWords}\n      remainingTime={0}\n      showPercent\n    />\n    <div className=\"titles\">\n      <div\n        className={displayedList === Lists.MissedWords ? 'disabled' : ''}\n      >\n        Found Words\n      </div>\n      <div\n        className={displayedList === Lists.FoundWords ? 'disabled' : ''}\n      >\n        Missed Words\n      </div>\n    </div>\n    <div className=\"results-main-container\">\n      <div className={foundWordsClass}>\n        <ScoredWordList {...{\n          scoredWords: orderedFoundWords,\n          scoreType\n        }}/>\n      </div>\n      <div className={missedWordsClass}>\n        <ScoredWordList {...{\n          scoredWords: orderedMissedWords,\n          scoreType\n        }}/>\n      </div>\n    </div>\n    <div className=\"results-list-selector\">\n      <ListSelector {...{ ...listSelectorProps, listName: Lists.FoundWords }}/>\n      <ListSelector {...{ ...listSelectorProps, listName: Lists.MissedWords }}/>\n    </div>\n  </div>\n}\n\nexport default Results\n","import * as R from 'ramda'\n\nimport { orderByWordScore, ScoreType, scoreWord } from \"../game\";\n\nimport './ScoredWordList.css'\nimport '../style/scrollbar.css'\n\nexport type ScoredWordsProps = { scoredWords: string[], scoreType: ScoreType }\n\nconst ScoredWords: React.FC<ScoredWordsProps> = ({ scoredWords, scoreType }) => {\n  const orderedWords = orderByWordScore(scoredWords, scoreType)\n\n  const makeScoredWord = (word: string) =>  <div className=\"scored-words-word\">{word.toUpperCase()}</div> \n  const makeScore = (word: string) => <div className=\"scored-words-score\">+{scoreWord(word, scoreType)}</div>\n\n  return <div className=\"scored-words-container scrollbar\">\n    <div className=\"scored-words-words\">{R.map(makeScoredWord, orderedWords)}</div>\n    <div className=\"scored-words-scores\">{R.map(makeScore, orderedWords)}</div>\n    </div>\n}\n\nexport default ScoredWords\n","const toCamelCaseReplaceFn = (_: string, wordSoFar: string, toCapitalize: string): string => {\n  return `${wordSoFar}${toCapitalize.toUpperCase()}`\n}\n\nexport const toCamelCase = (property: string) => property.replace(/(?:--)?(\\w+)-(\\w)/ig, toCamelCaseReplaceFn)\n\nconst getHeight = (id: string) => {\n  const rawHeight = getComputedStyle(document.getElementById(id) as HTMLElement).height\n  const height = parseFloat(rawHeight)\n\n  console.log(JSON.stringify({ rawHeight, height, id }))\n\n  return height\n}\n\n// eslint-disable-next-line\nconst em = (value: number) => {\n  const emPerPixel = getHeight('em-cheat')\n  return value * emPerPixel\n}\n\nconst vh = (value: number) => {\n  const vhPerPixel = getHeight('viewport-height-cheat')\n  return value * vhPerPixel\n}\n\n// eslint-disable-next-line\nconst vw = (value: number) => {\n  const vwPerPixel = getHeight('viewport-width-cheat')\n  return value * vwPerPixel\n}\n\nconst px = (value: number) => value\n\nconst unitMap = { em, vh, vw, px, '': (num: number) => num } as const\n\ntype Unit = keyof typeof unitMap\n\nconst clamp = (min: number, target: number, max: number) => {\n  const clampMin = Math.max(target, min)\n  const clampMax = Math.min(clampMin, max)\n  return clampMax\n}\n\nconst min = (a: number, b: number) => Math.min(a, b)\n\nconst max = (a: number, b: number) => Math.max(a, b)\n\nconst cssFunctionMap = {\n  clamp,\n  max,\n  min\n} as const\n\ntype ValidNames = keyof typeof cssFunctionMap\n\nconst isValidFunctionName = (fnName: string): fnName is ValidNames => (Object.keys(cssFunctionMap) as any as ValidNames).includes(fnName)\n\nconst getCssFunctionName = (expression: string): keyof typeof cssFunctionMap => {\n  const firstParenIndex = expression.indexOf('(')\n  if (firstParenIndex === -1) throw new Error(`${expression} has no function call`)\n  const untrimmedFnName = expression.substring(0, firstParenIndex)\n  const fnName = untrimmedFnName.trim()\n  if (isValidFunctionName(fnName)) return fnName\n\n  throw new Error(`${fnName} is not a supported css function name, expression: ${expression}`)\n}\n\nconst getParenCounts = (expression: string) => {\n  let left = 0, right = 0\n  expression.split('').forEach(char => {\n    if (char === '(') left++\n    if (char === ')') right++\n  })\n\n  return { left, right }\n}\n\nconst stitchParensReducer = (acc: string[], value: string, index: number, arr: string[]) => {\n  const { left, right } = getParenCounts(value)\n  if (left > right) return [...acc, `${value}, ${arr[index + 1]}`]\n  if (right > left) return acc\n  return [...acc, value]\n}\n\nconst isCssFunction = (arg: string) => {\n  return arg.indexOf('(') !== -1\n}\n\nconst isValidUint = (arg: string): arg is keyof typeof unitMap => unitMap.hasOwnProperty(arg)\n\nconst getUnit = (arg: string): Unit => {\n  const unit = /([a-z%]+)/.exec(arg)![0]\n\n  if (!isValidUint(unit)) throw new Error(`${unit} is not a supported/valid css unit. argument: ${arg}`)\n\n  return unit\n}\n\nconst evaluateArgument = (arg: string): number => {\n  if (isCssFunction(arg)) return evaluateFunction(arg)\n  // assume numeric value of some sort\n\n  const number = arg.replace(/([\\d.]*)/, '$1')\n  const unit = getUnit(arg)\n  const parsedNumber = parseFloat(number)\n\n  if (unit.length === 0 && parsedNumber !== 0) throw new Error(`${number} assumed to be numeric, ${parsedNumber} is not zero, needs unit`)\n  if (unit.length === 0) return 0\n\n  return unitMap[unit](parsedNumber)\n}\n\nconst evaluateFunction = (expression: string): number => {\n  const fnName = getCssFunctionName(expression)\n  const rest = expression.replace(fnName, '').trim()\n  const args = rest\n    .replace(/\\((.*)\\);?$/, '$1')\n    .split(',')\n    .map(w => w.trim())\n    .filter(w => w.length > 0)\n    .reduce<string[]>(stitchParensReducer, [] as string[])\n    .map(w => w.trim())\n  try {\n    const values = args.map(evaluateArgument)\n\n    if (fnName === 'clamp' && values.length !== 3) throw new Error(`${values} is not the right number of arguments for ${fnName}, ${expression}`)\n    if (fnName === 'max' && values.length !== 2) throw new Error(`${values} is not the right number of arguments for ${fnName}, ${expression}`)\n    if (fnName === 'min' && values.length !== 2) throw new Error(`${values} is not the right number of arguments for ${fnName}, ${expression}`)\n\n    return cssFunctionMap[fnName](...(values as [any, any, any]))\n\n  } catch (err) {\n    throw new Error(`${err.message}, parent expression: ${expression}`)\n  }\n}\nexport const cssExp = ([ expression ]: TemplateStringsArray, ..._rest: string[]) => {\n  if (isCssFunction(expression)) return evaluateFunction(expression)\n  return evaluateArgument(expression)\n}\n\n","import { useEffect, useCallback, useState } from 'react'\n\nimport { cssExp } from '../util/css-parse'\n\nconst getConstants = () => ({\n  fontSize: cssExp`clamp(1em, min(2.5vh, 4vw), 2em)`,\n  fontSizeTitle: cssExp`clamp(1.5em, min(3vh, 5.25vw), 3em)`,\n  fontWeightBold: 700,\n  fontWeightLight: 100,\n\n  colorContentDark: '#93a1a1',\n  colorContentLight: '#586e75',\n\n  colorContentLowContrastDark: '#657b83',\n  colorContentLowContrastLight: '#839496',\n\n  colorBackgroundDark: '#002b36',\n  colorBackgroundLight: '#eee8d5',\n\n  colorBackgroundDarkAlt: '#073642',\n  colorBackgroundLightAlt: '#fdf6e3',\n\n  colorAccent: '#268bd2'\n})\n\nexport const useConstants = () => {\n  const [constants, updateConstants] = useState(getConstants())\n  const updateState = useCallback(() => updateConstants(getConstants()), [])\n\n  useEffect(() => {\n    const eventListener = () => {\n      console.log(JSON.stringify(getConstants()))\n      updateState()\n    }\n    window.addEventListener('resize', eventListener)\n    return () => window.removeEventListener('resize', eventListener)\n  })\n\n  return constants\n}\n\n\nconst constants = {\n  fontSize: 'clamp(1em, min(2.5vh, 4vw), 2em)',\n  fontSizeTitle: 'clamp(1.5em, min(3vh, 5.25vw), 3em)',\n  fontWeightBold: 'bolder',\n  fontWeightLight: 'lighter',\n\n  colorContentDark: '#93a1a1',\n  colorContentLight: '#586e75',\n\n  colorContentLowContrastDark: '#657b83',\n  colorContentLowContrastLight: '#839496',\n\n  colorBackgroundDark: '#002b36',\n  colorBackgroundLight: '#eee8d5',\n\n  colorBackgroundDarkAlt: '#073642',\n  colorBackgroundLightAlt: '#fdf6e3',\n\n  colorAccent: '#268bd2'\n}\n\nexport default constants\n","import { scoreWord } from '../game'\nimport './Score.css'\n\nconst getTime = (timeInSeconds: number) => {\n  const seconds = timeInSeconds % 60\n  const minutes = Math.floor(timeInSeconds / 60)\n  const getFormatted = (num: number) => (num < 0 ? 0 : num).toString().padStart(2, '0')\n  return `${getFormatted(minutes)}:${getFormatted(seconds)}`\n}\n\nconst Score: React.FC<{\n  remainingWords: string[],\n  foundWords: string[],\n  remainingTime: number,\n  hideTime?: boolean,\n  showPercent?: boolean\n}> = ({\n  remainingWords,\n  foundWords,\n  remainingTime,\n  hideTime,\n  showPercent\n}) => {\n  const currentScore = foundWords.reduce((score: number, word: string) => scoreWord(word) + score, 0)\n  const totalScore = remainingWords.reduce((score: number, word: string) => scoreWord(word) + score, 0) + currentScore\n  const foundCount = foundWords.length\n  const totalCount = remainingWords.length + foundCount\n  return (\n    <div className=\"container\">\n      <div\n        className=\"section\"\n        style={hideTime ? { display: 'none'} : {}}\n      >\n        <div className=\"title\">Time</div>\n        <div className=\"info\">{getTime(remainingTime)}</div>\n      </div>\n      <div className=\"section\">\n        <div className=\"title\">Words</div>\n        <div className=\"info\">\n          {foundCount}/{totalCount}{showPercent ? ` (${Math.floor((foundCount/totalCount) * 100)}%)` : '' }\n        </div>\n      </div>\n      <div className=\"section\">\n        <div className=\"title\">Score</div>\n        <div className=\"info\">\n          {currentScore}/{totalScore}{showPercent ? ` (${Math.floor((currentScore/totalScore) * 100)}%)` : ''}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Score\n","import { useCallback, useEffect, useMemo, useState } from 'react'\n\nexport const useInterval = <T extends any>(callback: (...args: any[]) => T, interval: number, initialValue?: T): [T, () => void] => {\n  const [value, setValue] = useState<T | undefined>(initialValue)\n  const [intervalValue] = useState(setInterval(() => setValue(callback), interval))\n\n  const stopInterval = () => clearInterval(intervalValue)\n\n  return [value as T, stopInterval]\n}\n\nexport enum ElementIdentifier {\n  Class = 'class',\n  Id = 'id',\n  Type = 'type'\n}\n\nconst getElementBasedOnIdentifier = (type: ElementIdentifier, identifier: string) => {\n  switch (type) {\n    case ElementIdentifier.Class:\n      return document.getElementsByClassName(identifier)[0]\n    case ElementIdentifier.Id:\n      return document.getElementById(identifier) as HTMLElement\n    case ElementIdentifier.Type:\n      return document.getElementsByTagName(identifier)[0]\n  }\n}\n\nexport type ElementSizeInfo = {\n  location: {\n    top: number,\n    right: number,\n    bottom: number,\n    left: number\n  },\n  size: {\n    width: number,\n    height: number\n  }\n}\n\nexport const useElementSize = (identifierType: ElementIdentifier, identifier: string) => {\n  const { elementName, elementNameType } = useMemo(\n    () => ({ elementName: identifier, elementNameType: identifierType }),\n    [identifier, identifierType]\n  )\n  const [element, setElement] = useState<Element | undefined>()\n  const [size, setSize] = useState<ElementSizeInfo>({\n    location: { top: 0, right: 0, bottom: 0, left: 0 },\n    size: { width: 0, height: 0 }\n  })\n\n  const resizeCallback = useCallback((el: Element | undefined = element) => {\n    if (el) {\n      const {\n        top, right, bottom, left\n      } = el.getBoundingClientRect()\n      setSize({\n        location: { top, right, bottom, left },\n        size: { width: right - left, height: bottom - top }\n      })\n    }\n  }, [element])\n  useEffect(() => {\n    console.log('getting element...')\n    const element = getElementBasedOnIdentifier(elementNameType, elementName)\n    setElement(element)\n    resizeCallback(element)\n  }, [setElement, resizeCallback, elementName, elementNameType])\n\n\n  useEffect(() => {\n    const eventListener = () => resizeCallback()\n    window.addEventListener('resize', eventListener)\n    return () => window.removeEventListener('resize', eventListener)\n  })\n\n  return size\n}\n","const getMagnitued = (v1: Point2, v2: Point2) => {\n  const x = Math.abs(v1.x - v2.x)\n  const y = Math.abs(v1.y -v2.y)\n  return Math.sqrt(x*x+y*y)\n}\n\nexport type Point2 = { x: number, y: number }\n\nexport type GetPointOnGridInfoArguments = {\n  gridOrigin: Point2,\n  squareDimensions: Point2,\n  point: Point2,\n  useBoundingBox?: boolean\n  boundingBox: { min: Point2, max: Point2 }\n}\n\nexport type PointOnGridInfo = {\n  residingSquare: Point2\n  centerOfSquare: Point2\n  pointDistanceFromCenterOfSquare: number\n}\n\nexport const getPointOnGridInfo = ({\n  gridOrigin,\n  squareDimensions,\n  point,\n  useBoundingBox,\n  boundingBox\n}: GetPointOnGridInfoArguments): PointOnGridInfo => {\n  const { x: originX, y: originY } = gridOrigin\n  const { x: width, y: height } = squareDimensions\n  const { x, y } = point\n\n  const getUnadjustedIndex = (dimension: number, point: number, offset: number) => {\n    const isNegative = point < 0\n    return Math.floor((point - offset) / dimension) * (isNegative ? -1 : 1)\n  }\n\n  const getOffset = (dimension: number, origin: number) => origin % dimension\n  const xOffset = getOffset(width, originX)\n  const yOffset = getOffset(height, originY)\n\n  const xIndexUnadjusted = getUnadjustedIndex(width, x, xOffset)\n  const xBaseIndex = getUnadjustedIndex(width, originX, xOffset)\n\n  const yIndexUnadjusted = getUnadjustedIndex(height, y, yOffset)\n  const yBaseIndex = getUnadjustedIndex(height, originY, yOffset)\n\n  const xIndex = xIndexUnadjusted - xBaseIndex\n  const yIndex = yIndexUnadjusted - yBaseIndex\n  const getBoundedIndex = (min: number, max: number, index: number) => useBoundingBox\n    ? (index < min ? min : index > max ? max : index)\n    : index\n\n  const residingSquare = {\n    x: getBoundedIndex(boundingBox.min.x, boundingBox.max.x, xIndex),\n    y: getBoundedIndex(boundingBox.min.y, boundingBox.max.y, yIndex)\n  }\n\n  const getCenterOfIndex = (index: number, dimension: number, origin: number) => Math.round(index * dimension + dimension / 2 + origin)\n\n  const centerOfSquare = {\n    x: getCenterOfIndex(residingSquare.x, width, originX),\n    y: getCenterOfIndex(residingSquare.y, height, originY)\n  }\n  const averageDimension = (width + height) / 2\n\n  const pointDistanceFromCenterOfSquare = getMagnitued(point, centerOfSquare) / averageDimension\n\n  return {\n    residingSquare,\n    centerOfSquare,\n    pointDistanceFromCenterOfSquare\n  }\n}\n","import React, { useContext } from 'react'\nimport * as R from 'ramda'\n\nimport { GameAction, GameBoard, GameContext } from '../game/context'\nimport './Board.css'\nimport { getPointOnGridInfo, GetPointOnGridInfoArguments } from '../util/touch'\nimport { getLetterScore, ScoreType, useGameParameters } from '../game'\n\ntype LetterProps = {\n  row: number,\n  column: number,\n  letter: string,\n  visited: boolean,\n}\n\nconst Letter: React.FC<LetterProps> = ({\n  row,\n  column,\n  letter,\n  visited,\n}) => {\n  const dispatch = useContext(GameContext)\n  const { score: scoreType, language } = useGameParameters()\n  const classes = ['spacer']\n\n  if (visited) classes.push('visited')\n  const dispatchMoveEvent = () => { dispatch({ type: 'hover', info: { coordinates: { row, column } } }); console.log(`${row}-${column} hover`) }\n\n  const showScore = scoreType === ScoreType.Letters || undefined\n\n  return <div\n    className={classes.join(' ')}\n    key={`spacer-${row}-${column}`}\n  >\n    <div\n      className=\"activator\"\n      onMouseOver={dispatchMoveEvent}\n    >\n      <div className=\"letter\">{letter.toUpperCase()}</div>\n    </div>\n    {showScore && <div className=\"board-letter-score\">{getLetterScore(letter, language)}</div>}\n  </div>\n}\n\nconst Row: React.FC<{ row: number }> = ({ row, children }) => <div className=\"row\" key={row} >{children}</div>\n\ntype enumerable = { [key: number]: any }\n\ntype ArrayLike<T extends enumerable = any> = (T[number] extends infer X ? { [key: number]: X } : never) & { length: number }\nfunction getLast<T extends ArrayLike>(items: T): T[number] { \n  const { length } = items\n  return items[length - 1]\n}\n\n\nexport const Board: React.FC<{ board: GameBoard }> = ({ board }) => {\n  const dispatch = useContext(GameContext)\n\n  const handleClick = (clicked: boolean) => dispatch({ type: 'click', info: { clicked } })\n\n  const boardWidth = board.width\n\n  const makeColumn = (row: number) => (column: number) => <Letter {...{\n    row,\n    column,\n    ...board[row][column],\n    key: `letter-${row}-${column}`\n  }}/>\n\n  const makeRows = (row: number) => <Row row={row} key={`row-${row}`}>{R.times(makeColumn(row), boardWidth)}</Row>\n\n  const maybeDispatchMove = ({ clientX, clientY }: React.Touch, acceptableDistance: number) => {\n    const board = document.getElementsByClassName('board')[0]\n    const { top, bottom, left } = board.getBoundingClientRect()\n    const divisionAmount = (bottom-top)/boardWidth\n\n    const gridOrigin = { x: left, y: top }\n    const point = { x: clientX, y: clientY }\n    const squareDimensions = { x: divisionAmount, y: divisionAmount }\n    const boundingBox = { min: { x: 0, y: 0 }, max: { x: boardWidth - 1, y: boardWidth - 1 }}\n    const options: GetPointOnGridInfoArguments = { gridOrigin, point, squareDimensions, useBoundingBox: true, boundingBox }\n\n    const { residingSquare, pointDistanceFromCenterOfSquare } = getPointOnGridInfo(options)\n    const { x: column, y: row } = residingSquare\n\n    if (pointDistanceFromCenterOfSquare <= acceptableDistance) {\n      dispatch({ type: 'hover', info: { coordinates: { row, column } } })\n    }\n  }\n\n  return <div\n    className=\"board\"\n    onMouseDown={() => { handleClick(true); console.log('start click') }}\n    onMouseUp={() => { handleClick(false); console.log('end click') }}\n    onTouchStart={(e) => {\n      const lastTouch = getLast(e.touches)\n      maybeDispatchMove(lastTouch, 1)\n      handleClick(true)\n    }}\n    onTouchMove={(e) => {\n      const lastTouch = getLast(e.touches)\n      maybeDispatchMove(lastTouch, .5)\n    }}\n    onTouchEnd={() => handleClick(false)}\n  >\n    {R.times(makeRows, boardWidth)}\n  </div>\n}\n\nconst Wrapped: React.FC<{ board: GameBoard, context: React.Dispatch<GameAction> }> = ({ board, context }) => (\n  <GameContext.Provider value={context}><Board board={board}/></GameContext.Provider>\n)\n\nexport default Wrapped\n","import * as R from 'ramda'\n\nimport './Guesses.css'\n\ntype GuessProps = {\n  guess: string,\n  isFirstGuess: boolean,\n  isInDictionary: boolean\n  key: number\n}\nconst Guess: React.FC<GuessProps> = ({ guess, isFirstGuess, isInDictionary, key }) => {\n  const className = isFirstGuess && isInDictionary\n    ? 'correct-guess'\n    : isInDictionary\n      ? 'repeat-guess'\n      : 'incorrect-guess'\n\n  return <div {...{ className, key }}>{guess.toUpperCase()}</div>\n}\n\nconst getGuessInfo = (guess: string, guesses: string[], dictionary: string[], index: number = 0) => {\n  const isFirstGuess = guesses.lastIndexOf(guess) === index\n  const isInDictionary = dictionary.includes(guess) \n\n  return { isFirstGuess, isInDictionary }\n}\n\nexport type GuessesProps = {\n guesses: string[],\n dictionary: string[],\n}\n\nconst Guesses: React.FC<GuessesProps> = ({ guesses, dictionary }) => {\n  const guessesReversed = R.reverse(guesses)\n  const indexedMap = R.addIndex<string, JSX.Element>(R.map)\n\n  const makeGuess = (guess: string, index: number) => {\n    const guessInfo = getGuessInfo(guess, guessesReversed, dictionary, index)\n    return <Guess {...{ guess, ...guessInfo, key: index }}/>\n  }\n\n\n\n  return <div className=\"guess-list\" >\n    {indexedMap(makeGuess, guessesReversed)}\n  </div>\n}\n\nexport default Guesses\n","import * as R from 'ramda'\nimport { ScoreType, scoreWord } from \"../game\"\n\nimport './MostRecentGuess.css'\n\nexport type MostRecentGuessProps = {\n  guesses: string[],\n  dictionary: string[],\n  scoreType: ScoreType,\n  currentLetterChain: string\n}\n\nconst MostRecentGuess: React.FC<MostRecentGuessProps> = ({\n  guesses,\n  currentLetterChain,\n  dictionary,\n  scoreType\n}) => {\n  const showLetterChain = currentLetterChain.length > 0\n  const guessesReversed = R.reverse(guesses)\n  const mostRecentGuess = R.head(guessesReversed) || ''\n\n  const isCorrectGuess = dictionary.includes(mostRecentGuess)\n  const isFirstTimeGuessing = guessesReversed.lastIndexOf(mostRecentGuess) === 0\n\n  const shouldScoreWord = !showLetterChain && isCorrectGuess\n  const repeatScore = !isFirstTimeGuessing\n\n  const score = shouldScoreWord ? ` +${scoreWord(mostRecentGuess, scoreType)}` : ''\n\n  const classes = ['most-recent-guess', repeatScore ? 'repeat-score' : ''].join(' ')\n\n  const word = showLetterChain ? currentLetterChain : mostRecentGuess\n\n  return <div className={classes}>{`${word.toUpperCase()}${score}`}</div>\n}\n\nexport default MostRecentGuess\n","import './layout.css'\n\ntype VerticalContainerProps = {\n  Board: JSX.Element,\n  MostRecentGuess: JSX.Element,\n  Guesses: JSX.Element,\n  Score: JSX.Element\n}\n\ntype HorizontalContainerProps = VerticalContainerProps & {\n  FoundWords: JSX.Element\n}\n\nexport const HorizontalContainer: React.FC<HorizontalContainerProps> = ({\n  Board,\n  MostRecentGuess,\n  Guesses,\n  Score,\n  FoundWords\n}) => {\n  return <div className=\"game-horizontal-container\">\n    <div className=\"left-pane\">\n      <div className=\"board-holder\">{Board}</div>\n      <div className=\"most-recent-guess-holder\">{MostRecentGuess}</div>\n    </div>\n    <div className=\"right-pane\">\n      <div className=\"score-holder\">{Score}</div>\n      <div className=\"list-titles-holder\">\n        <div>Guesses</div>\n        <div>Found Words</div>\n      </div>\n      <div className=\"lists-holder\">\n        <div className=\"guesses-holder\">{Guesses}</div>\n        <div className=\"found-words-holder\">{FoundWords}</div>\n      </div>\n    </div>\n  </div>\n}\n\nexport const VerticalContainer: React.FC<VerticalContainerProps> = ({\n  Board,\n  MostRecentGuess,\n  Guesses,\n  Score\n}) => {\n  return <div className=\"game-vertical-container\">\n    <div className=\"board-holder\">{Board}</div>\n    <div className=\"most-recent-guess-holder\">{MostRecentGuess}</div>\n    <div className=\"guesses-holder\">{Guesses}</div>\n    <div className=\"score-holder\">{Score}</div>\n  </div>\n}\n","import { useState, useEffect } from 'react' \nimport { useLocation } from 'react-router-dom'\n\nimport { useGame, GameURLParams } from '../game'\nimport { ElementIdentifier, useElementSize, useInterval } from '../util/hooks'\nimport { parseURLSearch } from '../util/url'\n \nimport Board from './Board'\nimport Score from './Score'\nimport Guesses from './Guesses'\nimport MostRecentGuess from './MostRecentGuess'\nimport ScoredWordList from './ScoredWordList'\nimport { HorizontalContainer, VerticalContainer } from './game/layouts'\n\n\nconst getTimeDifference = (start: Date, end: Date) => ((end as any) - (start as any)) as number\n\nconst getRemainingTimeUnapplied = (startTime: Date, totalTime: number) => () => {\n  const timePassedInMs: number = (new Date() as any - (startTime as any))\n  const timePassed = Math.floor(timePassedInMs / 1000)\n  return totalTime - timePassed\n}\n\nexport type GameParams = {\n  handleFinish: (foundWords: string[], remainingWords: string[]) => void\n  dictionary: string[]\n}\n\nconst Game: React.FC<GameParams> = ({\n  handleFinish,\n  dictionary\n}) => {\n  const [startedAt] = useState(new Date())\n\n  const location = useLocation()\n\n  const searchParams = parseURLSearch<GameURLParams>(location.search)\n\n  const [game, dispatch, gameParameters] = useGame(searchParams, dictionary)\n\n  const getRemainingTime = getRemainingTimeUnapplied(startedAt, gameParameters.time)\n  const [remainingTime, stopInterval] = useInterval<number>(getRemainingTime, 500, 0)\n\n  const { size: { height, width } } = useElementSize(ElementIdentifier.Class, 'game-container')\n\n  const useVerticalLayout = height >= width\n\n  const {\n    remainingWords,\n    foundWords,\n    currentLetterChain\n  } = game\n  const gameIsOver = getTimeDifference(startedAt, new Date()) > (gameParameters.time * 1000)\n\n  useEffect(() => stopInterval, [stopInterval])\n\n  useEffect(() => {\n    if (gameIsOver) {\n     stopInterval()\n     handleFinish(foundWords, remainingWords)\n    }\n  }, [gameIsOver, handleFinish, foundWords, remainingWords, stopInterval])\n\n\n  const scoreType = gameParameters.score\n\n  const guessProps = {\n    guesses: game.guessedWords,\n    dictionary: game.foundWords,\n    scoreType\n  }\n\n  const board = <Board board={game.board} context={dispatch} />\n  const mostRecentGuesses = <MostRecentGuess {...{ ...guessProps, currentLetterChain }}/>\n  const guesses = <Guesses {...guessProps} />\n  const score = <Score {...{ remainingWords, foundWords, remainingTime: remainingTime <= 0 ? 0 : remainingTime }}/>\n  const foundWordsComponent = <ScoredWordList {...{ scoredWords: foundWords, scoreType }} />\n\n\n  const verticalLayout = <VerticalContainer\n    Board={board}\n    MostRecentGuess={mostRecentGuesses}\n    Guesses={guesses}\n    Score={score}\n  />\n\n  const horizontalLayout = <HorizontalContainer\n    Board={board}\n    MostRecentGuess={mostRecentGuesses}\n    Guesses={guesses}\n    Score={score}\n    FoundWords={foundWordsComponent}\n  />\n\n  const layout = useVerticalLayout ? verticalLayout : horizontalLayout;\n  return <div className=\"game-container\" style={{ height: '100%' }}>{layout}</div>\n}\n\nexport default Game\n","import { useState } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nimport { parseGameParameters, GameURLParams } from '../game'\nimport { parseURLSearch } from '../util/url'\nimport constants, { useConstants } from '../style/constants'\n\nimport './StartScreen.css'\nimport { ReactComponent as Timer } from '@material-design-icons/svg/round/timer.svg'\nimport { ReactComponent as GridView } from '@material-design-icons/svg/round/grid_view.svg'\nimport { ReactComponent as EmojiEvents } from '@material-design-icons/svg/round/emoji_events.svg'\nimport { ReactComponent as Sort } from '@material-design-icons/svg/round/sort.svg'\nimport { ReactComponent as PlayCircle } from '@material-design-icons/svg/round/play_circle.svg'\n\nconst getLanguageName = (languageCode: string): string => ({\n  en_US: 'English (US)'\n}[languageCode] as any)\n\nconst getScoringType = (scoringType: string): string => ({\n  'l': 'Letter',\n  'w': 'Word'\n}[scoringType] as any)\n\nconst getReadableTime = (time: number) => {\n  const minutes = Math.floor(time / 60)\n  if (minutes === 1) return '1 min'\n  return `${minutes} mins`\n}\n\nexport type StartScreenProps = {\n  handleStart: () => any\n  dictionary: string[],\n  loading: boolean,\n  error: boolean\n}\n\nconst StartScreen: React.FC<StartScreenProps> = ({\n  handleStart,\n  dictionary,\n  loading,\n  error\n}) => {\n  const location = useLocation()\n  const [gameParams] = useState(parseGameParameters(parseURLSearch<GameURLParams>(location.search)))\n\n  const { fontSize, fontSizeTitle } = useConstants()\n\n  console.log(JSON.stringify({ fontSize }))\n\n  const gridSize = Math.floor(Math.sqrt(gameParams.board.length))\n\n  const startButtonClass = loading || error\n    ? 'start-screen-start-button-disabled'\n    : 'start-screen-start-button'\n  const disabled = loading || error\n\n  const wordCount = loading\n    ? 'Loading...'\n    : error\n    ? 'Error loading board'\n    : `${dictionary.length} words`\n\n  return <div className=\"start-screen\">\n    <div className=\"start-screen-title\">Web Lexica Multiplayer Game</div>\n    <div className=\"start-screen-language\">{getLanguageName(gameParams.language)}</div>\n    <div className=\"start-screen-info-container\">\n      <div className=\"start-screen-info\">\n        <Timer\n          title=\"Time\"\n          fill={constants.colorContentDark}\n          width={fontSize}\n          height={fontSize}\n        />\n        <div>{getReadableTime(gameParams.time)}</div>\n      </div>\n      <div className=\"start-screen-info\">\n        <GridView\n          title=\"Grid-Size\"\n          fill={constants.colorContentDark}\n          width={fontSize}\n          height={fontSize}\n        />\n        <div>{gridSize}x{gridSize}</div>\n      </div>\n      <div className=\"start-screen-info\">\n        <EmojiEvents\n          title=\"Scoring\"\n          fill={constants.colorContentDark}\n          width={fontSize}\n          height={fontSize}\n        />\n        <div>{getScoringType(gameParams.score)} Points</div>\n      </div>\n      <div className=\"start-screen-info\">\n        <Sort\n          title=\"Minimum Word Length\"\n          fill={constants.colorContentDark}\n          width={fontSize}\n          height={fontSize}\n        />\n        <div>&ge; {gameParams.minimumWordLength}</div>\n      </div>\n    </div>\n    <div className=\"start-screen-word-count\">{wordCount}</div>\n    <div className=\"start-screen-start-prompt\">When all players are ready, you should all start the game at the same time.</div>\n    <div\n      className={`start-screen-start-button-universal ${startButtonClass}`}\n      onClick={disabled ? undefined : handleStart}\n    >\n      <PlayCircle\n        title=\"Start\"\n        fill={disabled ? constants.colorBackgroundDark : constants.colorBackgroundLight}\n        width={fontSizeTitle}\n        height={fontSizeTitle}\n      />\n      <div>Start game</div>\n    </div>\n  </div>\n}\n\nexport default StartScreen\n","import { useState } from 'react';\n\nimport './App.css';\n\nimport Results from './components/Results';\nimport Game from './components/Game';\nimport StartScreen from './components/StartScreen';\nimport { useDictionary } from './game';\n\nfunction App() {\n  const [started, updateStarted] = useState(false)\n  const [results, updateResults] = useState({\n    finished: false,\n    foundWords: [] as string[],\n    remainingWords: [] as string[]\n  })\n\n  const { loading, error, dictionary } = useDictionary()\n\n  const handleStart = () => updateStarted(true)\n  const handleFinish = (foundWords: string[], remainingWords: string[]) => {\n    console.log('handling finish...')\n    updateResults({\n      finished: true,\n      foundWords,\n      remainingWords\n    })\n  } \n\n  const {\n    finished,\n    foundWords,\n    remainingWords\n  } = results\n\n  console.log({ finished })\n\n  return (\n      <div className=\"App\">\n        {\n          finished\n            ? <Results {...{ foundWords, remainingWords }}/>\n            : started\n              ? <Game {...{ handleFinish, dictionary }}/>\n              : <StartScreen {...{ handleStart, loading, error, dictionary }}/>\n        }\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}